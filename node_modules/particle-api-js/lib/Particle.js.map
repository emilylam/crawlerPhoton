{"version":3,"sources":["../src/Particle.js"],"names":["Particle","options","context","agent","baseUrl","name","undefined","_isValidContext","Error","auth","full","get","tracking","username","password","tokenDuration","request","uri","form","grant_type","client_id","clientId","client_secret","clientSecret","expires_in","method","accountInfo","post","account_info","token","delete","access_token","deviceId","deviceName","sortAttr","sortDir","page","perPage","product","query","per_page","deviceUri","requestTransfer","id","request_transfer","deny","data","updateDevice","signal","notes","development","desiredFirmwareVersion","flash","desired_firmware_version","put","productId","product_id","iccid","promoCode","files","targetVersion","build_target_version","latest","console","warning","app","platformId","platform_id","binaryId","req","use","prefix","headers","debug","key","algorithm","deviceID","publicKey","toString","filename","order","Date","now","argument","args","org","toLowerCase","encodeURIComponent","connect","isPrivate","postData","private","url","requestType","json","body","responseTemplate","responseTopic","rejectUnauthorized","webhookAuth","noDefaults","event","deviceid","hookId","integrationType","settings","integrationId","stripeToken","bodyObj","stripe_token","head","iccids","countryCode","sims","action","mbLimit","mb_limit","onlyFeatured","featured","limit","filter","sort","architectures","category","scope","excludeScopes","_asList","value","Array","isArray","join","version","archive","visibility","force","buffer","parse","responseType","then","res","xhr","response","type","redirect_uri","file","title","description","_buildContext","api","prototype","removeAccessToken","deleteAccessToken"],"mappings":"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","file":"Particle.js","sourcesContent":["import request from 'superagent';\nimport binaryParser from './superagent-binary-parser';\nimport Defaults from './Defaults';\nimport EventStream from './EventStream';\nimport Agent from './Agent';\nimport Client from './Client';\n\n/**\n * Particle Cloud API wrapper.\n *\n * See <https://docs.particle.io/reference/javascript/> for examples\n * of using the `Particle` class.\n *\n * Most Particle methods take a single unnamed argument object documented as\n * `options` with key/value pairs for each option.\n */\nclass Particle {\n\t/**\n\t * Contructor for the Cloud API wrapper.\n\t *\n\t * Create a new Particle object and call methods below on it.\n\t *\n\t * @param  {Object} options Options for this API call Options to be used for all requests (see [Defaults](../src/Defaults.js))\n\t */\n\tconstructor(options = {}) {\n\t\t// todo - this seems a bit dangerous - would be better to put all options/context in a contained object\n\t\tObject.assign(this, Defaults, options);\n\t\tthis.context = {};\n\t\tthis.agent = new Agent(this.baseUrl);\n\t}\n\n\t_isValidContext(name, context) {\n\t\treturn (name==='tool' || name==='project') && context!==undefined;\n\t}\n\n\tsetContext(name, context) {\n\t\tif (context!==undefined) {\n\t\t\tif (this._isValidContext(name, context)) {\n\t\t\t\tthis.context[name] = context;\n\t\t\t} else {\n\t\t\t\tthrow Error('uknown context name or undefined context: '+name);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Builds the final context from the context parameter and the context items in the api.\n\t * @param  {Object} context       The invocation context, this takes precedence over the local context.\n\t * @return {Object} The context to use.\n\t * @private\n\t */\n\t_buildContext(context) {\n\t\treturn Object.assign(this.context, context);\n\t}\n\n\t/**\n\t * Retrieves the information that is used to identify the current login for tracking.\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.auth      The access token\n\t * @param  {Boolean} options.full      When true, retrieve all information for registering a user with the tracking API. When false,\n\t *  retrieve only the unique tracking ID for the current login.\n\t * @param  {Object} context   Context information.\n\t * @returns {Promise<Object>} Resolve the tracking identify of the current login\n\t */\n\ttrackingIdentity({ auth, full = false, context } = {}) {\n\t\treturn this.get('/v1/user/identify', auth, (full ? undefined : { tracking: 1 }), context);\n\t}\n\n\t/**\n\t * Login to Particle Cloud using an existing Particle acccount.\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.username      Username for the Particle account\n\t * @param  {String} options.password      Password for the Particle account\n\t * @param  {Number} options.tokenDuration How long the access token should last in seconds\n\t * @return {Promise}\n\t */\n\tlogin({ username, password, tokenDuration = this.tokenDuration, context }) {\n\t\treturn this.request({ uri: '/oauth/token', form: {\n\t\t\tusername,\n\t\t\tpassword,\n\t\t\tgrant_type: 'password',\n\t\t\tclient_id: this.clientId,\n\t\t\tclient_secret: this.clientSecret,\n\t\t\texpires_in: tokenDuration\n\t\t}, method: 'post', context });\n\t}\n\n\t/**\n\t * Create a user account for the Particle Cloud\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.username Email of the new user\n\t * @param  {String} options.password Password\n\t * @param  {String} options.accountInfo Object that contains account information fields such as user real name, company name, business account flag etc\n\t * @return {Promise}\n\t */\n\tcreateUser({ username, password, accountInfo, context }) {\n\t\treturn this.post('/v1/users', {\n\t\t\tusername,\n\t\t\tpassword,\n\t\t\taccount_info : accountInfo\n\t\t}, undefined, context);\n\t}\n\n\t/**\n\t * Verify new user account via verification email\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.token the string token sent in the verification email\n\t * @return {Promise}\n\t */\n\tverifyUser({ token, context }) {\n\t\treturn this.post('/v1/user/verify', {\n\t\t\ttoken\n\t\t}, undefined, context);\n\t}\n\n\t/**\n\t * Send reset password email for a Particle Cloud user account\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.username Email of the user\n\t * @return {Promise}\n\t */\n\tresetPassword({ username, context }) {\n\t\treturn this.post('/v1/user/password-reset', { username }, undefined, context);\n\t}\n\n\t/**\n\t * Revoke an access token\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.username Username of the Particle cloud account that the token belongs to.\n\t * @param  {String} options.password Password for the account\n\t * @param  {String} options.token    Access token you wish to revoke\n\t * @return {Promise}\n\t */\n\tdeleteAccessToken({ username, password, token, context }) {\n\t\treturn this.delete(`/v1/access_tokens/${token}`, {\n\t\t\taccess_token: token\n\t\t}, { username, password }, context);\n\t}\n\n\t/**\n\t * List all valid access tokens for a Particle Cloud account\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.username Username\n\t * @param  {String} options.password Password\n\t * @return {Promise}\n\t */\n\tlistAccessTokens({ username, password, context }) {\n\t\treturn this.get('/v1/access_tokens', { username, password }, undefined, context);\n\t}\n\n\t/**\n\t * List devices claimed to the account or product\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} [options.deviceId]   (Product only) Filter results to devices with this ID (partial matching)\n\t * @param  {String} [options.deviceName] (Product only) Filter results to devices with this name (partial matching)\n\t * @param  {String} [options.sortAttr]   (Product only) The attribute by which to sort results. See API docs for options.\n\t * @param  {String} [options.sortDir]    (Product only) The direction of sorting. See API docs for options.\n\t * @param  {Number} [options.page]       (Product only) Current page of results\n\t * @param  {Number} [options.perPage]    (Product only) Records per page\n\t * @param  {String} [options.product]    List devices in this product ID or slug\n\t * @param  {String} options.auth         Access Token\n\t * @return {Promise}\n\t */\n\tlistDevices({ deviceId, deviceName, sortAttr, sortDir, page, perPage, product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/devices` : '/v1/devices';\n\t\tconst query = product ? { deviceId, deviceName, sortAttr, sortDir, page, per_page: perPage } : undefined;\n\t\treturn this.get(uri, auth, query, context);\n\t}\n\n\t/**\n\t * Get detailed informationa about a device\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId  Device ID or Name\n\t * @param  {String} [options.product] Device in this product ID or slug\n\t * @param  {String} options.auth      Access token\n\t * @return {Promise}\n\t */\n\tgetDevice({ deviceId, product, auth, context }) {\n\t\tconst uri = this.deviceUri({ deviceId, product });\n\t\treturn this.get(uri, auth, undefined, context);\n\t}\n\n\t/**\n\t * Claim a device to the account. The device must be online and unclaimed.\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId Device ID\n\t * @param  {String} options.auth     Access Token\n\t * @return {Promise}\n\t */\n\tclaimDevice({ deviceId, requestTransfer, auth, context }) {\n\t\treturn this.post('/v1/devices', {\n\t\t\tid: deviceId,\n\t\t\trequest_transfer: !!requestTransfer\n\t\t}, auth, context);\n\t}\n\n\t/**\n\t * Add a device to a product or move device out of quarantine.\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId Device ID\n\t * @param  {String} options.product  Add to this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @return {Promise}\n\t */\n\taddDeviceToProduct({ deviceId, product, auth, context }) {\n\t\tconst uri = `/v1/products/${product}/devices`;\n\t\treturn this.post(uri, {\n\t\t\tid: deviceId\n\t\t}, auth, context);\n\t}\n\n\t/**\n\t * Unclaim / Remove a device from your account or product, or deny quarantine\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId Device ID or Name\n\t * @param  {Boolean} [options.deny]  (Product only) Deny this quarantined device, instead of removing an already approved device\n\t * @param  {String} options.product  Remove from this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @return {Promise}\n\t */\n\tremoveDevice({ deviceId, deny, product, auth, context }) {\n\t\tconst uri = this.deviceUri({ deviceId, product });\n\t\tconst data = product ? { deny } : undefined;\n\t\treturn this.delete(uri, data, auth, context);\n\t}\n\n\t/**\n\t * Unclaim a product device its the owner, but keep it in the product\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId Device ID or Name\n\t * @param  {String} options.product  Remove from this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @return {Promise}\n\t */\n\tremoveDeviceOwner({ deviceId, deny, product, auth, context }) {\n\t\tconst uri = `/v1/products/${product}/devices/${deviceId}/owner`;\n\t\treturn this.delete(uri, undefined, auth, context);\n\t}\n\n\t/**\n\t * Rename a device\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId Device ID or Name\n\t * @param  {String} options.name     Desired Name\n\t * @param  {String} [options.product] Rename device in this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @return {Promise}\n\t */\n\trenameDevice({ deviceId, name, product, auth, context }) {\n\t\treturn this.updateDevice({ deviceId, name, product, auth, context });\n\t}\n\n\t/**\n\t * Instruct the device to turn on/off the LED in a rainbow pattern\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId Device ID or Name\n\t * @param  {Boolean} options.signal   Signal on or off\n\t * @param  {String} [options.product] Device in this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @return {Promise}\n\t */\n\tsignalDevice({ deviceId, signal, product, auth, context }) {\n\t\treturn this.updateDevice({ deviceId, signal, product, auth, context });\n\t}\n\n\t/**\n\t * Store some notes about device\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId  Device ID or Name\n\t * @params {String} options.notes     Your notes about this device\n\t * @param  {String} [options.product] Device in this product ID or slug\n\t * @param  {String} options.auth      Access Token\n\t * @return {Promise}\n\t */\n\tsetDeviceNotes({ deviceId, notes, product, auth, context }) {\n\t\treturn this.updateDevice({ deviceId, notes, product, auth, context });\n\t}\n\n\t/**\n\t * Mark device as being used in development of a product so it opts out of automatic firmware updates\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId      Device ID or Name\n\t * @param  {Boolean} options.development  Set to true to mark as development, false to return to product fleet\n\t * @param  {String} options.product       Device in this product ID or slug\n\t * @param  {String} options.auth          Access Token\n\t * @return {Promise}\n\t */\n\tmarkAsDevelopmentDevice({ deviceId, development = true, product, auth, context }) {\n\t\treturn this.updateDevice({ deviceId, development, product, auth, context });\n\t}\n\n\t/**\n\t * Mark device as being used in development of a product so it opts out of automatic firmware updates\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId      Device ID or Name\n\t * @params {Number} options.desiredFirmwareVersion Lock the product device to run this firmware version.\n\t * @params {Boolean} [options.flash]      Immediately flash firmware indicated by desiredFirmwareVersion\n\t * @param  {String} options.product       Device in this product ID or slug\n\t * @param  {String} options.auth          Access Token\n\t * @return {Promise}\n\t */\n\tlockDeviceProductFirmware({ deviceId, desiredFirmwareVersion, flash, product, auth, context }) {\n\t\treturn this.updateDevice({ deviceId, desiredFirmwareVersion, flash, product, auth, context });\n\t}\n\n\t/**\n\t * Mark device as receiving automatic firmware updates\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId      Device ID or Name\n\t * @param  {String} options.product       Device in this product ID or slug\n\t * @param  {String} options.auth          Access Token\n\t * @return {Promise}\n\t */\n\tunlockDeviceProductFirmware({ deviceId, product, auth, context }) {\n\t\treturn this.updateDevice({ deviceId, desiredFirmwareVersion: null, product, auth, context });\n\t}\n\n\t/**\n\t * Update multiple device attributes at the same time\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId       Device ID or Name\n\t * @param  {String} [options.name]         Desired Name\n\t * @param  {Boolean} options.signal        Signal device on or off\n\t * @params {String} [options.notes]        Your notes about this device\n\t * @param  {Boolean} [options.development] (Product only) Set to true to mark as development, false to return to product fleet\n\t * @params {Number} [options.desiredFirmwareVersion] (Product only) Lock the product device to run this firmware version.\n\t *                                              Pass `null` to unlock firmware and go back to released firmware.\n\t * @params {Boolean} [options.flash]       (Product only) Immediately flash firmware indicated by desiredFirmwareVersion\n\t * @param  {String} [options.product]      Device in this product ID or slug\n\t * @param  {String} options.auth           Access Token\n\t * @return {Promise}\n\t */\n\tupdateDevice({ deviceId, name, signal, notes, development, desiredFirmwareVersion, flash, product, auth, context }) {\n\t\tsignal = signal ? '1' : '0';\n\t\tconst uri = this.deviceUri({ deviceId, product });\n\t\tconst data = product ?\n\t\t\t{ name, signal, notes, development, desired_firmware_version: desiredFirmwareVersion, flash } :\n\t\t\t{ name, signal, notes };\n\t\treturn this.put(uri, data, auth, context);\n\t}\n\n\t/**\n\t * Provision a new device for products that allow self-provisioning\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.productId Product ID where to create this device\n\t * @param  {String} options.auth      Access Token\n\t * @return {Promise}\n\t */\n\tprovisionDevice({ productId, auth, context }) {\n\t\treturn this.post('/v1/devices', { product_id: productId }, auth, context);\n\t}\n\n\t/**\n\t * Generate a claim code to use in the device claiming process.\n\t * To generate a claim code for a product, the access token MUST belong to a\n\t * customer of the product.\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} [options.iccid] ICCID of the SIM card used in the Electron\n\t * @param  {String} [options.product] Device in this product ID or slug\n\t * @param  {String} options.auth  Access Token\n\t * @return {Promise}\n\t */\n\tgetClaimCode({ iccid, product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/device_claims` : '/v1/device_claims';\n\t\treturn this.post(uri, { iccid }, auth, context);\n\t}\n\n\tvalidatePromoCode({ auth, promoCode, context }) {\n\t\treturn this.get(`/v1/promo_code/${promoCode}`, auth, undefined, context);\n\t}\n\n\tchangeProduct({ deviceId, productId, auth, context }) {\n\t\treturn this.put(`/v1/devices/${deviceId}`, {\n\t\t\tproduct_id: productId\n\t\t}, auth, context);\n\t}\n\n\t/**\n\t * Get the value of a device variable\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId Device ID or Name\n\t * @param  {String} options.name     Variable name\n\t * @param  {String} [options.product] Device in this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @return {Promise}\n\t */\n\tgetVariable({ deviceId, name, product, auth, context }) {\n\t\tconst uri = product ?\n\t\t\t`/v1/products/${product}/devices/${deviceId}/${name}` :\n\t\t\t`/v1/devices/${deviceId}/${name}`;\n\t\treturn this.get(uri, auth, undefined, context);\n\t}\n\n\t/**\n\t * Compile and flash application firmware to a device. Pass a pre-compiled binary to flash it directly to the device.\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId      Device ID or Name\n\t * @param  {Object} options.files         Object containing files to be compiled and flashed. Keys should be the filenames, and the values should be a path or Buffer of the file contents.\n\t * @param  {String} [options.targetVersion=latest] System firmware version to compile against\n\t * @param  {String} options.auth          String\n\t * @return {Promise}\n\t */\n\tflashDevice({ deviceId, files, targetVersion, auth, context }) {\n\t\tconst form = {};\n\t\tif (targetVersion) {\n\t\t\tform.build_target_version = targetVersion;\n\t\t} else {\n\t\t\tform.latest = 'true';\n\t\t}\n\t\treturn this.request({ uri: `/v1/devices/${deviceId}`,\n\t\t\tfiles, auth, form, context, method: 'put' });\n\t}\n\n\t/**\n\t * DEPRECATED: Flash the Tinker application to a device. Instead compile and flash the Tinker source code.\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId Device ID or Name\n\t * @param  {String} options.auth     Access Token\n\t * @return {Promise}\n\t */\n\tflashTinker({ deviceId, auth, context }) {\n\t\t/* eslint-disable no-console */\n\t\tif (console && console.warning) {\n\t\t\tconsole.warning('Particle.flashTinker is deprecated');\n\t\t}\n\t\t/* eslint-enable no-console */\n\t\treturn this.put(`/v1/devices/${deviceId}`, {\n\t\t\tapp: 'tinker'\n\t\t}, auth, context);\n\t}\n\n\t/**\n\t * Compile firmware using the Particle Cloud\n\t * @param  {Object} options Options for this API call\n\t * @param  {Object} options.files         Object containing files to be compiled. Keys should be the filenames, and the values should be a path or Buffer of the file contents.\n\t * @param  {Number} [options.platformId]    Platform id number of the device you are compiling for. Common values are 0=Core, 6=Photon, 10=Electron.\n\t * @param  {String} [options.targetVersion=latest] System firmware version to compile against\n\t * @param  {String} options.auth          Access Token\n\t * @return {Promise}\n\t */\n\tcompileCode({ files, platformId, targetVersion, auth, context }) {\n\t\tconst form = { platform_id: platformId };\n\t\tif (targetVersion) {\n\t\t\tform.build_target_version = targetVersion;\n\t\t} else {\n\t\t\tform.latest = 'true';\n\t\t}\n\t\treturn this.request({ uri: '/v1/binaries',\n\t\t\tfiles, auth, form, context, method: 'post' });\n\t}\n\n\t/**\n\t * Download a firmware binary\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.binaryId Binary ID received from a successful compile call\n\t * @param  {String} options.auth     Access Token\n\t * @return {Request}\n\t */\n\tdownloadFirmwareBinary({ binaryId, auth, context }) {\n\t\tconst uri = `/v1/binaries/${binaryId}`;\n\t\tconst req = request('get', uri);\n\t\treq.use(this.prefix);\n\t\tthis.headers(req, auth);\n\t\tif (this.debug) {\n\t\t\tthis.debug(req);\n\t\t}\n\t\treturn req;\n\t}\n\n\t/**\n\t * Send a new device public key to the Particle Cloud\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId  Device ID or Name\n\t * @param  {(String|Buffer)} options.key       Public key contents\n\t * @param  {String} [options.algorithm=rsa] Algorithm used to generate the public key. Valid values are `rsa` or `ecc`.\n\t * @param  {String} options.auth      Access Token\n\t * @return {Promise}\n\t */\n\tsendPublicKey({ deviceId, key, algorithm, auth, context }) {\n\t\treturn this.post(`/v1/provisioning/${deviceId}`, {\n\t\t\tdeviceID: deviceId,\n\t\t\tpublicKey: ( typeof key === 'string' ? key : key.toString() ),\n\t\t\tfilename: 'particle-api',\n\t\t\torder: `manual_${ Date.now() }`,\n\t\t\talgorithm: algorithm || 'rsa'\n\t\t}, auth, context);\n\t}\n\n\t/**\n\t * Call a device function\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId Device ID or Name\n\t * @param  {String} options.name     Function name\n\t * @param  {String} options.argument Function argument\n\t * @param  {String} [options.product] Device in this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @return {Promise}\n\t */\n\tcallFunction({ deviceId, name, argument, product, auth, context }) {\n\t\tconst uri = product ?\n\t\t\t`/v1/products/${product}/devices/${deviceId}/${name}` :\n\t\t\t`/v1/devices/${deviceId}/${name}`;\n\t\treturn this.post(uri, { args: argument }, auth, context);\n\t}\n\n\t/**\n\t * Get a stream of events\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} [options.deviceId] Device ID or Name, or `mine` to indicate only your devices.\n\t * @param  {String} [options.name]     Event Name\n\t * @param  {String} [options.org]     Organization Slug\n\t * @param  {String} [options.product] Events for this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @return {Promise} If the promise resolves, the resolution value will be an EventStream object that will\n\t * emit 'event' events, as well as the specific named event.\n\t */\n\tgetEventStream({ deviceId, name, org, product, auth, context }) {\n\t\tlet uri = '/v1/';\n\t\tif (org) {\n\t\t\turi += `orgs/${org}/`;\n\t\t}\n\n\t\tif (product) {\n\t\t\turi += `products/${product}/`;\n\t\t}\n\n\t\tif (deviceId) {\n\t\t\turi += 'devices/';\n\t\t\tif (!(deviceId.toLowerCase() === 'mine')) {\n\t\t\t\turi += `${deviceId}/`;\n\t\t\t}\n\t\t}\n\n\t\turi += 'events';\n\n\t\tif (name) {\n\t\t\turi += `/${encodeURIComponent(name)}`;\n\t\t}\n\n\t\treturn new EventStream(`${this.baseUrl}${uri}`, auth, { debug: this.debug }).connect();\n\t}\n\n\t/**\n\t * Publish a event to the Particle Cloud\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.name      Event name\n\t * @param  {String} options.data      Event data\n\t * @param  {Boolean} options.isPrivate Should the event be publicly available?\n\t * @param  {String} [options.product]  Event for this product ID or slug\n\t * @param  {String} options.auth      Access Token\n\t * @return {Promise}\n\t */\n\tpublishEvent({ name, data, isPrivate, product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/events` : '/v1/devices/events';\n\t\tconst postData = { name, data, private: isPrivate };\n\t\treturn this.post(uri, postData, auth, context);\n\t}\n\n\t/**\n\t * Create a webhook\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId           Trigger webhook only for this device ID or Name\n\t * @param  {String} options.name               Webhook name\n\t * @param  {String} options.url                URL the webhook should hit\n\t * @param  {String} [options.requestType=POST]        HTTP method to use\n\t * @param  {Object} [options.headers]            Additional headers to add to the webhook\n\t * @param  {Object} [options.json]               JSON data\n\t * @param  {Object} [options.query]              Query string data\n\t * @param  {String} [options.body]               Custom webhook request body\n\t * @param  {Object} [options.responseTemplate]   Webhook response template\n\t * @param  {Object} [options.responseTopic]      Webhook response topic\n\t * @param  {Boolean} [options.rejectUnauthorized] Reject invalid HTTPS certificates\n\t * @params {Boolean} [options.noDefaults]        Don't include default event data in the webhook request\n\t * @param  {Object} [options.webhookAuth]        HTTP Basic Auth information\n\t * @param  {Object} [options.form]               Form data\n\t * @param  {String} [options.product]          Webhook for this product ID or slug\n\t * @param  {String} options.auth               Access Token\n\t * @return {Promise}\n\t */\n\tcreateWebhook({ deviceId, name, url, requestType, headers, json, query, body, responseTemplate, responseTopic, rejectUnauthorized, webhookAuth, noDefaults, form, product, auth, context }) {\n\t\t// deviceId: 'mine' is deprecated since webhooks only trigger on your device anyways\n\t\tif (deviceId === 'mine') {\n\t\t\tdeviceId = undefined;\n\t\t}\n\t\tconst uri = product ? `/v1/products/${product}/webhooks` : '/v1/webhooks';\n\t\tconst data = { event: name, deviceid: deviceId, url, requestType, headers, json, query, body, responseTemplate, responseTopic, rejectUnauthorized, auth: webhookAuth, noDefaults, form };\n\t\treturn this.post(uri, data, auth, context);\n\t}\n\n\t/**\n\t * Delete a webhook\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.hookId Webhook ID\n\t * @param  {String} [options.product]          Webhook for this product ID or slug\n\t * @param  {String} options.auth   Access Token\n\t * @return {Promise}\n\t */\n\tdeleteWebhook({ hookId, product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/webhooks/${hookId}` : `/v1/webhooks/${hookId}`;\n\t\treturn this.delete(uri, undefined, auth, context);\n\t}\n\n\t/**\n\t * List all webhooks owned by the account or product\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} [options.product]          Webhooks for this product ID or slug\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\tlistWebhooks({ product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/webhooks` : '/v1/webhooks';\n\t\treturn this.get(uri, auth, undefined, context);\n\t}\n\n\t/**\n\t * Create an integration to send events to an external service\n     *\n\t * See the API docs for details https://docs.particle.io/reference/api/#integrations-webhooks-\n\t *\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.integrationType  The kind of external integration. One of Webhook, AzureIotHub, GoogleCloudPubSub, GoogleMaps\n\t * @param  {String} options.event            Event that triggers the integration\n\t * @params {Object} options.settings         Settings specific to that integration type\n\t * @param  {String} [options.deviceId]       Trigger integration only for this device ID or Name\n\t * @param  {String} [options.product]        Integration for this product ID or slug\n\t * @param  {String} options.auth             Access Token\n\t * @return {Promise}\n\t */\n\tcreateIntegration({ integrationType, event, settings, deviceId, product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/integrations` : '/v1/integrations';\n\t\tconst data = Object.assign({ event, deviceid: deviceId }, settings);\n\t\treturn this.post(uri, data, auth, context);\n\t}\n\n\t/**\n\t * Edit an integration to send events to an external service\n\t *\n\t * See the API docs for details https://docs.particle.io/reference/api/#integrations-webhooks-\n\t *\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.integrationId    The integration to edit\n\t * @param  {String} [options.event]          Change the event that triggers the integration\n\t * @params {Object} [options.settings]       Change the settings specific to that integration type\n\t * @param  {String} [options.deviceId]       Trigger integration only for this device ID or Name\n\t * @param  {String} [options.product]        Integration for this product ID or slug\n\t * @param  {String} options.auth             Access Token\n\t * @return {Promise}\n\t */\n\teditIntegration({ integrationId, event, settings, deviceId, product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/integrations/${integrationId}` : `/v1/integrations/${integrationId}`;\n\t\tconst data = Object.assign({ event, deviceid: deviceId }, settings);\n\t\treturn this.put(uri, data, auth, context);\n\t}\n\n\t/**\n\t * Delete an integration to send events to an external service\n\t *\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.integrationId    The integration to remove\n\t * @param  {String} [options.product]        Integration for this product ID or slug\n\t * @param  {String} options.auth             Access Token\n\t * @return {Promise}\n\t */\n\tdeleteIntegration({ integrationId, product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/integrations/${integrationId}` : `/v1/integrations/${integrationId}`;\n\t\treturn this.delete(uri, undefined, auth, context);\n\t}\n\n\t/**\n\t * List all integrations owned by the account or product\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} [options.product]        Integrations for this product ID or slug\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\tlistIntegrations({ product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/integrations` : '/v1/integrations';\n\t\treturn this.get(uri, auth, undefined, context);\n\t}\n\n\t/**\n\t * Get details about the current user\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\tgetUserInfo({ auth, context }) {\n\t\treturn this.get('/v1/user', auth, undefined, context);\n\t}\n\n\t/**\n\t * Set details on the current user\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.auth Access Token\n\t * @param  {String} options.stripeToken Set user's stripe token for payment\n\t * @param  {String} options.accountInfo Set user's extended info fields (name, business account, company name, etc)\n\t * @param  {String} options.password Change authenticated user password\n\t * @return {Promise}\n\t */\n\tsetUserInfo({ stripeToken, accountInfo, password, auth, context }) {\n\t\tconst bodyObj = {};\n\n\t\t(stripeToken ? bodyObj.stripe_token = stripeToken : null);\n\t\t(accountInfo ? bodyObj.account_info = accountInfo : null);\n\t\t(password ? bodyObj.password = password : null);\n\n\t\treturn this.put('/v1/user', bodyObj, auth, context);\n\t}\n\n\t/**\n\t * List SIM cards owned by a user or product\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} [options.iccid]    (Product only) Filter to SIM cards matching this ICCID\n\t * @param  {String} [options.deviceId] (Product only) Filter to SIM cards matching this device ID\n\t * @param  {String} [options.deviceName] (Product only) Filter to SIM cards matching this device name\n\t * @param  {Number} [options.page]     (Product only) Current page of results\n\t * @param  {Number} [options.perPage]  (Product only) Records per page\n\t * @param  {String} [options.product]  SIM cards for this product ID or slug\n\t * @param  {String} options.auth       Access Token\n\t * @return {Promise}\n\t */\n\tlistSIMs({ iccid, deviceId, deviceName, page, perPage, product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/sims` : '/v1/sims';\n\t\tconst query = product ? { iccid, deviceId, deviceName, page, per_page: perPage } : undefined;\n\t\treturn this.get(uri, auth, query, context);\n\t}\n\n\t/**\n\t * Get data usage for one SIM card for the current billing period\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.iccid      ICCID of the SIM card\n\t * @param  {String} [options.product]  SIM card for this product ID or slug\n\t * @param  {String} options.auth       Access Token\n\t * @return {Promise}\n\t */\n\tgetSIMDataUsage({ iccid, product, auth, context }) {\n\t\tconst uri = product ?\n\t\t\t`/v1/products/${product}/sims/${iccid}/data_usage` :\n\t\t\t`/v1/sims/${iccid}/data_usage`;\n\t\treturn this.get(uri, auth, undefined, context);\n\t}\n\n\t/**\n\t * Get data usage for all SIM cards in a product the current billing period\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.product  SIM cards for this product ID or slug\n\t * @param  {String} options.auth     Access Token\n\t * @return {Promise}\n\t */\n\tgetFleetDataUsage({ product, auth, context }) {\n\t\treturn this.get(`/v1/products/${product}/sims/data_usage`, auth, undefined, context);\n\t}\n\n\tcheckSIM({ iccid, auth, context }) {\n\t\treturn this.head(`/v1/sims/${iccid}`, auth, undefined, context);\n\t}\n\n\t/**\n\t * Activate and add SIM cards to an account or product\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.iccid        ICCID of the SIM card\n\t * @param  {Array<String>} options.iccids (Product only) ICCID of multiple SIM cards to import\n\t * @param  {String} options.countryCode The ISO country code for the SIM cards\n\t * @param  {String} [options.product]  SIM cards for this product ID or slug\n\t * @param  {String} options.auth       Access Token\n\t * @return {Promise}\n\t */\n\tactivateSIM({ iccid, iccids, countryCode, promoCode, product, auth, context }) {\n\t\t// promoCode is deprecated\n\t\ticcids = iccids || [iccid];\n\t\tconst uri = product ? `/v1/products/${product}/sims` : `/v1/sims/${iccid}`;\n\t\tconst data = product ?\n\t\t\t{ sims: iccids, countryCode } :\n\t\t\t{ countryCode, promoCode, action: 'activate' };\n\t\tconst method = product ? 'post' : 'put';\n\n\t\treturn this.request({ uri, method, data, auth, context });\n\t}\n\n\t/**\n\t * Deactivate a SIM card so it doesn't incur data usage in future months.\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.iccid      ICCID of the SIM card\n\t * @param  {String} [options.product]  SIM cards for this product ID or slug\n\t * @param  {String} options.auth       Access Token\n\t * @return {Promise}\n\t */\n\tdeactivateSIM({ iccid, product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/sims/${iccid}` : `/v1/sims/${iccid}`;\n\t\tconst data = { action: 'deactivate' };\n\t\treturn this.put(uri, data, auth, context);\n\t}\n\n\t/**\n\t * Reactivate a SIM card the was deactivated or unpause a SIM card that was automatically paused\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.iccid      ICCID of the SIM card\n\t * @param  {Number} [options.mbLimit]  New monthly data limit. Necessary if unpausing a SIM card\n\t * @param  {String} [options.product]  SIM cards for this product ID or slug\n\t * @param  {String} options.auth       Access Token\n\t * @return {Promise}\n\t */\n\treactivateSIM({ iccid, mbLimit, product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/sims/${iccid}` : `/v1/sims/${iccid}`;\n\t\tconst data = { mb_limit: mbLimit, action: 'reactivate' };\n\t\treturn this.put(uri, data, auth, context);\n\t}\n\n\t/**\n\t * Update SIM card data limit\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.iccid        ICCID of the SIM card\n\t * @param  {Array}  options.mbLimit     Data limit in megabyte for the SIM card\n\t * @param  {String} [options.product]  SIM cards for this product ID or slug\n\t * @param  {String} options.auth       Access Token\n\t * @return {Promise}\n\t */\n\tupdateSIM({ iccid, mbLimit, product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/sims/${iccid}` : `/v1/sims/${iccid}`;\n\t\tconst data = { mb_limit: mbLimit };\n\t\treturn this.put(uri, data, auth, context);\n\t}\n\n\t/**\n\t * Remove a SIM card from an account so it can be activated by a different account\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.iccid      ICCID of the SIM card\n\t * @param  {String} [options.product]  SIM cards for this product ID or slug\n\t * @param  {String} options.auth       Access Token\n\t * @return {Promise}\n\t */\n\tremoveSIM({ iccid, product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/sims/${iccid}` : `/v1/sims/${iccid}`;\n\t\treturn this.delete(uri, undefined, auth, context);\n\t}\n\n\t/**\n\t * List valid build targets to be used for compiling\n\t * @param  {Object} options Options for this API call\n\t * @param  {Boolean} [options.onlyFeatured=false] Only list featured build targets\n\t * @param  {String} options.auth       Access Token\n\t * @return {Promise}\n\t */\n\tlistBuildTargets({ onlyFeatured, auth, context }) {\n\t\tlet query;\n\t\tif (onlyFeatured !== undefined) {\n\t\t\tquery = { featured: !!onlyFeatured };\n\t\t}\n\t\treturn this.get('/v1/build_targets', auth, query, context);\n\t}\n\n\t/**\n\t * List firmware libraries\n\t * @param  {Object} options Options for this API call\n\t * @param  {Number} options.page Page index (default, first page)\n\t * @param  {Number} options.limit Number of items per page\n\t * @param  {String} options.filter Search term for the libraries\n\t * @param  {String} options.sort Ordering key for the library list\n\t * @param  {Array<String>}  options.architectures List of architectures to filter\n\t * @param  {String} options.category Category to filter\n\t * @param  {String} options.scope The library scope to list. Default is 'all'. Other values are\n\t * - 'all' - list public libraries and my private libraries\n\t * - 'public' - list only public libraries\n\t * - 'private' - list only my private libraries\n\t * - 'mine' - list my libraries (public and private)\n\t * - 'official' - list only official libraries\n\t * - 'verified' - list only verified libraries\n\t * - 'featured' - list only featured libraries\n\t * @param  {String} options.excludeScopes  list of scopes to exclude\n\t * @param  {String} options.category Category to filter\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\tlistLibraries({ page, limit, filter, sort, architectures, category, scope, excludeScopes, auth, context }) {\n\t\treturn this.get('/v1/libraries', auth, {\n\t\t\tpage,\n\t\t\tfilter,\n\t\t\tlimit,\n\t\t\tsort,\n\t\t\tarchitectures: this._asList(architectures),\n\t\t\tcategory,\n\t\t\tscope,\n\t\t\texcludeScopes: this._asList(excludeScopes)\n\t\t}, context);\n\t}\n\n\t_asList(value) {\n\t\treturn (Array.isArray(value) ? value.join(',') : value);\n\t}\n\n\t/**\n\t * Get firmware library details\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.name Name of the library to fetch\n\t * @param  {String} options.version Version of the library to fetch (default: latest)\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\tgetLibrary({ name, version, auth, context }) {\n\t\treturn this.get(`/v1/libraries/${name}`, auth, { version }, context);\n\t}\n\n\t/**\n\t * Firmware library details for each version\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.name Name of the library to fetch\n\t * @param  {Number} options.page Page index (default, first page)\n\t * @param  {Number} options.limit Number of items per page\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\tgetLibraryVersions({ name, page, limit, auth, context }) {\n\t\treturn this.get(`/v1/libraries/${name}/versions`, auth, {\n\t\t\tpage,\n\t\t\tlimit\n\t\t}, context);\n\t}\n\n\t/**\n\t * Contribute a new library version from a compressed archive\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.archive Compressed archive file containing the library sources\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\tcontributeLibrary({ archive, auth, context }) {\n\t\tconst files = {\n\t\t\t'archive.tar.gz': archive\n\t\t};\n\n\t\treturn this.request({ uri: '/v1/libraries',\n\t\t\tfiles, auth, context, method: 'post' });\n\t}\n\n\t/**\n\t * Publish the latest version of a library to the public\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.name Name of the library to publish\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\tpublishLibrary({ name, auth, context }) {\n\t\treturn this.request({ uri: `/v1/libraries/${name}`,\n\t\t\tauth, context, method: 'patch', data: { visibility: 'public' } });\n\t}\n\n\t/**\n\t * Delete one version of a library or an entire private library\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.name Name of the library to remove\n\t * @param  {String} options.force Key to force deleting a public library\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\tdeleteLibrary({ name, force, auth, context }) {\n\t\treturn this.delete(`/v1/libraries/${name}`, { force }, auth, context);\n\t}\n\n\t/**\n\t * Download an external file that may not be on the API\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.url URL of the file.\n\t * @return {Promise} Resolves to a buffer with the file data\n\t */\n\tdownloadFile({ url }) {\n\t\tlet req = request.get(url);\n\t\tif (req.buffer) {\n\t\t\treq = req.buffer(true).parse(binaryParser);\n\t\t} else if (req.responseType) {\n\t\t\treq = req.responseType('arraybuffer').then(res => {\n\t\t\t\tres.body = res.xhr.response;\n\t\t\t\treturn res;\n\t\t\t});\n\t\t}\n\t\treturn req.then(res => res.body);\n\t}\n\n\t/**\n\t * List OAuth client created by the account\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} [options.product] List clients for this product ID or slug\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\tlistOAuthClients({ product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/clients` : '/v1/clients';\n\t\treturn this.get(uri, auth, undefined, context);\n\t}\n\n\t/**\n\t * Create an OAuth client\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.name               Name of the OAuth client\n\t * @param  {String} options.type               web, installed or web\n\t * @param  {String} [options.redirect_uri]     URL to redirect after OAuth flow. Only for type web.\n\t * @param  {Object} [options.scope]            Limits what the access tokens created by this client can do.\n\t * @param  {String} [options.product]          Create client for this product ID or slug\n\t * @param  {String} options.auth               Access Token\n\t * @return {Promise}\n\t */\n\tcreateOAuthClient({ name, type, redirect_uri, scope, product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/clients` : '/v1/clients';\n\t\tconst data = { name, type, redirect_uri, scope };\n\t\treturn this.post(uri, data, auth, context);\n\t}\n\n\t/**\n\t * Update an OAuth client\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.clientId           The OAuth client to update\n\t * @param  {String} [options.name]             New Name of the OAuth client\n\t * @param  {Object} [options.scope]            New scope of the OAuth client\n\t * @param  {String} [options.product]          Update client linked to this product ID or slug\n\t * @param  {String} options.auth               Access Token\n\t * @return {Promise}\n\t */\n\tupdateOAuthClient({ clientId, name, scope, product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/clients/${clientId}` : `/v1/clients/${clientId}`;\n\t\tconst data = { name, scope };\n\t\treturn this.put(uri, data, auth, context);\n\t}\n\n\t/**\n\t * Delete an OAuth client\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.clientId           The OAuth client to update\n\t * @param  {String} [options.product]          OAuth client linked to this product ID or slug\n\t * @param  {String} options.auth               Access Token\n\t * @return {Promise}\n\t */\n\tdeleteOAuthClient({ clientId, product, auth, context }) {\n\t\tconst uri = product ? `/v1/products/${product}/clients/${clientId}` : `/v1/clients/${clientId}`;\n\t\treturn this.delete(uri, undefined, auth, context);\n\t}\n\n\t/**\n\t * List products the account has access to\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\tlistProducts({ auth, context }) {\n\t\treturn this.get('/v1/products', auth, undefined, context);\n\t}\n\n\t/**\n\t * Get detailed information about a product\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.product  Product ID or slug\n\t * @param  {String} options.auth     Access token\n\t * @return {Promise}\n\t */\n\tgetProduct({ product, auth, context }) {\n\t\treturn this.get(`/v1/products/${product}`, auth, undefined, context);\n\t}\n\n\t/**\n\t * List product firmware versions\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.product Firmware for this product ID or slug\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\tlistProductFirmware({ product, auth, context }) {\n\t\treturn this.get(`/v1/products/${product}/firmware`, auth, undefined, context);\n\t}\n\n\t/**\n\t * List product firmware versions\n\t * @param  {Object} options Options for this API call\n\t * @param  {Object} options.file    Path or Buffer of the new firmware file\n\t * @param  {Number} options.version Version number of new firmware\n\t * @param  {String} options.title   Short identifier for the new firmware\n\t * @param  {String} [options.description] Longer description for the new firmware\n\t * @param  {String} options.product Firmware for this product ID or slug\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\tuploadProductFirmware({ file, version, title, description, product, auth, context }) {\n\t\treturn this.request({\n\t\t\turi: `/v1/products/${product}/firmware`,\n\t\t\tmethod: 'post',\n\t\t\tfiles: {\n\t\t\t\t'firmware.bin': file\n\t\t\t},\n\t\t\tform: {\n\t\t\t\tversion,\n\t\t\t\ttitle,\n\t\t\t\tdescription\n\t\t\t},\n\t\t\tcontext,\n\t\t\tauth\n\t\t});\n\t}\n\n\t/**\n\t * Get information about a product firmware version\n\t * @param  {Object} options Options for this API call\n\t * @param  {Number} options.version Version number of firmware\n\t * @param  {String} options.product Firmware for this product ID or slug\n\t * @param  {String} options.auth    Access token\n\t * @return {Promise}\n\t */\n\tgetProductFirmware({ version, product, auth, context }) {\n\t\treturn this.get(`/v1/products/${product}/firmware/${version}`, auth, undefined, context);\n\t}\n\n\t/**\n\t * Update information for a product firmware version\n\t * @param  {Object} options Options for this API call\n\t * @param  {Number} options.version Version number of new firmware\n\t * @param  {String} [options.title]   New title\n\t * @param  {String} [options.description] New description\n\t * @param  {String} options.product Firmware for this product ID or slug\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\tupdateProductFirmware({ version, title, description, product, auth, context }) {\n\t\tconst uri = `/v1/products/${product}/firmware/${version}`;\n\t\treturn this.put(uri, { title, description }, auth, context);\n\t}\n\n\t/**\n\t * Download a product firmware binary\n\t * @param  {Object} options Options for this API call\n\t * @param  {Number} options.version Version number of new firmware\n\t * @param  {String} options.product Firmware for this product ID or slug\n\t * @param  {String} options.auth    Access Token\n\t * @return {Request}\n\t */\n\tdownloadProductFirmware({ version, product, auth, context }) {\n\t\tconst uri = `/v1/products/${product}/firmware/${version}/binary`;\n\t\tconst req = request('get', uri);\n\t\treq.use(this.prefix);\n\t\tthis.headers(req, auth);\n\t\tif (this.debug) {\n\t\t\tthis.debug(req);\n\t\t}\n\t\treturn req;\n\t}\n\n\t/**\n\t * Release a product firmware version as the default version\n\t * @param  {Object} options Options for this API call\n\t * @param  {Number} options.version Version number of new firmware\n\t * @param  {String} options.product Firmware for this product ID or slug\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\treleaseProductFirmware({ version, product, auth, context }) {\n\t\tconst uri = `/v1/products/${product}/firmware/release`;\n\t\treturn this.put(uri, { version }, auth, context);\n\t}\n\n\t/**\n\t * List product team members\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.product Team for this product ID or slug\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\tlistTeamMembers({ product, auth, context }) {\n\t\treturn this.get(`/v1/products/${product}/team`, auth, undefined, context);\n\t}\n\n\t/**\n\t * Invite Particle user to a product team\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.username  Username for the Particle account\n\t * @param  {String} options.product Team for this product ID or slug\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\tinviteTeamMember({ username, product, auth, context }) {\n\t\treturn this.post(`/v1/products/${product}/team`, { username }, auth, context);\n\t}\n\n\t/**\n\t * Remove Particle user to a product team\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.username  Username for the Particle account\n\t * @param  {String} options.product Team for this product ID or slug\n\t * @param  {String} options.auth Access Token\n\t * @return {Promise}\n\t */\n\tremoveTeamMember({ username, product, auth, context }) {\n\t\treturn this.delete(`/v1/products/${product}/team/${username}`, undefined, auth, context);\n\t}\n\n\t/**\n\t * API URI to access a device\n\t * @param  {Object} options Options for this API call\n\t * @param  {String} options.deviceId  Device ID to access\n\t * @param  {String} [options.product] Device only in this product ID or slug\n\t * @private\n\t * @returns {string}\n\t */\n\tdeviceUri({ deviceId, product }) {\n\t\treturn product ? `/v1/products/${product}/devices/${deviceId}` : `/v1/devices/${deviceId}`;\n\t}\n\n\tget(uri, auth, query, context) {\n\t\tcontext = this._buildContext(context);\n\t\treturn this.agent.get(uri, auth, query, context);\n\t}\n\n\thead(uri, auth, query, context) {\n\t\tcontext = this._buildContext(context);\n\t\treturn this.agent.head(uri, auth, query, context);\n\t}\n\n\tpost(uri, data, auth, context) {\n\t\tcontext = this._buildContext(context);\n\t\treturn this.agent.post(uri, data, auth, context);\n\t}\n\n\tput(uri, data, auth, context) {\n\t\tcontext = this._buildContext(context);\n\t\treturn this.agent.put(uri, data, auth, context);\n\t}\n\n\tdelete(uri, data, auth, context) {\n\t\tcontext = this._buildContext(context);\n\t\treturn this.agent.delete(uri, data, auth, context);\n\t}\n\n\trequest(args) {\n\t\targs.context = this._buildContext(args.context);\n\t\treturn this.agent.request(args);\n\t}\n\n\tclient(options = {}) {\n\t\treturn new Client(Object.assign({ api: this }, options));\n\t}\n}\n\n// Aliases for backwards compatibility\nParticle.prototype.removeAccessToken = Particle.prototype.deleteAccessToken;\n\nexport default Particle;\n"]}